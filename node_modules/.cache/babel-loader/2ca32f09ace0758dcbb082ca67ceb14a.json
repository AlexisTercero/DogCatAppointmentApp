{"ast":null,"code":"var _jsxFileName = \"/Users/alexistercero/Desktop/react-udemy/CITAS/appointment-vet-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Citas en el local storage\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n\n  if (!citasIniciales) {\n    citasIniciales = [];\n  } // Arreglo de citas\n\n\n  const [citas, guardarCitas] = useState(citasIniciales); //useEffect para realizar ciertas operaciones antes cambios del state\n\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n\n    if (citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas]); //Funcion que toma las citas actuales y agrega la nueva\n\n  const crearCita = cita => {\n    guardarCitas([...citas, cita]);\n  }; //Funcion que elimina citas por su id\n\n\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  }; //Mensaje condicional\n\n\n  const titulo = citas.length === 0 ? \"No Appointments\" : \"Appointments List\";\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/home\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"one-half row\",\n                children: /*#__PURE__*/_jsxDEV(Formulario, {\n                  crearCita: crearCita\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/appointments\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"one-half row\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: titulo\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 17\n                }, this), citas.map(cita => /*#__PURE__*/_jsxDEV(Cita, {\n                  cita: cita,\n                  eliminarCita: eliminarCita\n                }, cita.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 19\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"oBdvimZmpf0ogKNJfMjciV0eGOE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alexistercero/Desktop/react-udemy/CITAS/appointment-vet-app/src/App.js"],"names":["React","Fragment","useState","useEffect","Formulario","Cita","Header","Footer","BrowserRouter","Router","Switch","Route","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","setItem","stringify","crearCita","cita","eliminarCita","id","nuevasCitas","filter","titulo","length","map"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nfunction App() {\n\n  // Citas en el local storage\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  // Arreglo de citas\n  const[citas, guardarCitas] = useState(citasIniciales);\n\n  //useEffect para realizar ciertas operaciones antes cambios del state\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n\n    if(citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas))\n    } else{\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas] );\n\n  //Funcion que toma las citas actuales y agrega la nueva\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  }\n\n  //Funcion que elimina citas por su id\n    const eliminarCita = id => {\n      const nuevasCitas = citas.filter(cita => cita.id !== id );\n      guardarCitas(nuevasCitas);\n    }\n  //Mensaje condicional\n  const titulo = citas.length === 0 ? \"No Appointments\" : \"Appointments List\"\n\n  return (\n    <Fragment>\n      <Router>\n        <Header />\n        <Switch>\n        <div className=\"container\">\n          <div className=\"row\">\n            <Route path=\"/home\">\n              <div className=\"one-half row\">\n                <Formulario \n                  crearCita={crearCita}\n                />\n              </div>\n            </Route>\n            <Route path=\"/appointments\">\n              <div className=\"one-half row\">\n                <h4>{titulo}</h4>\n                {citas.map(cita => (\n                  <Cita \n                  key={cita.id}\n                  cita={cita}\n                  eliminarCita={eliminarCita}               \n                  />\n              ))}\n              </div>\n            </Route>\n          </div>\n        </div>\n        </Switch>\n        <Footer /> \n      </Router>\n    </Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}